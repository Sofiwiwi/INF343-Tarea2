// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package monitoreo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitoreoServiceClient is the client API for MonitoreoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoreoServiceClient interface {
	// Stream del lado del servidor para enviar actualizaciones al cliente
	SubscribeToUpdates(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (MonitoreoService_SubscribeToUpdatesClient, error)
}

type monitoreoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoreoServiceClient(cc grpc.ClientConnInterface) MonitoreoServiceClient {
	return &monitoreoServiceClient{cc}
}

func (c *monitoreoServiceClient) SubscribeToUpdates(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (MonitoreoService_SubscribeToUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitoreoService_ServiceDesc.Streams[0], "/monitoreo.MonitoreoService/SubscribeToUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoreoServiceSubscribeToUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoreoService_SubscribeToUpdatesClient interface {
	Recv() (*EmergencyStatusUpdate, error)
	grpc.ClientStream
}

type monitoreoServiceSubscribeToUpdatesClient struct {
	grpc.ClientStream
}

func (x *monitoreoServiceSubscribeToUpdatesClient) Recv() (*EmergencyStatusUpdate, error) {
	m := new(EmergencyStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoreoServiceServer is the server API for MonitoreoService service.
// All implementations must embed UnimplementedMonitoreoServiceServer
// for forward compatibility
type MonitoreoServiceServer interface {
	// Stream del lado del servidor para enviar actualizaciones al cliente
	SubscribeToUpdates(*SubscriptionRequest, MonitoreoService_SubscribeToUpdatesServer) error
	mustEmbedUnimplementedMonitoreoServiceServer()
}

// UnimplementedMonitoreoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoreoServiceServer struct {
}

func (UnimplementedMonitoreoServiceServer) SubscribeToUpdates(*SubscriptionRequest, MonitoreoService_SubscribeToUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToUpdates not implemented")
}
func (UnimplementedMonitoreoServiceServer) mustEmbedUnimplementedMonitoreoServiceServer() {}

// UnsafeMonitoreoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoreoServiceServer will
// result in compilation errors.
type UnsafeMonitoreoServiceServer interface {
	mustEmbedUnimplementedMonitoreoServiceServer()
}

func RegisterMonitoreoServiceServer(s grpc.ServiceRegistrar, srv MonitoreoServiceServer) {
	s.RegisterService(&MonitoreoService_ServiceDesc, srv)
}

func _MonitoreoService_SubscribeToUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoreoServiceServer).SubscribeToUpdates(m, &monitoreoServiceSubscribeToUpdatesServer{stream})
}

type MonitoreoService_SubscribeToUpdatesServer interface {
	Send(*EmergencyStatusUpdate) error
	grpc.ServerStream
}

type monitoreoServiceSubscribeToUpdatesServer struct {
	grpc.ServerStream
}

func (x *monitoreoServiceSubscribeToUpdatesServer) Send(m *EmergencyStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// MonitoreoService_ServiceDesc is the grpc.ServiceDesc for MonitoreoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoreoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoreo.MonitoreoService",
	HandlerType: (*MonitoreoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToUpdates",
			Handler:       _MonitoreoService_SubscribeToUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monitoreo.proto",
}
