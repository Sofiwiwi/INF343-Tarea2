// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package drones

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DronesServiceClient is the client API for DronesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DronesServiceClient interface {
	AssignEmergency(ctx context.Context, in *AssignEmergencyRequest, opts ...grpc.CallOption) (*AssignEmergencyResponse, error)
}

type dronesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDronesServiceClient(cc grpc.ClientConnInterface) DronesServiceClient {
	return &dronesServiceClient{cc}
}

func (c *dronesServiceClient) AssignEmergency(ctx context.Context, in *AssignEmergencyRequest, opts ...grpc.CallOption) (*AssignEmergencyResponse, error) {
	out := new(AssignEmergencyResponse)
	err := c.cc.Invoke(ctx, "/drones.DronesService/AssignEmergency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DronesServiceServer is the server API for DronesService service.
// All implementations must embed UnimplementedDronesServiceServer
// for forward compatibility
type DronesServiceServer interface {
	AssignEmergency(context.Context, *AssignEmergencyRequest) (*AssignEmergencyResponse, error)
	mustEmbedUnimplementedDronesServiceServer()
}

// UnimplementedDronesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDronesServiceServer struct {
}

func (UnimplementedDronesServiceServer) AssignEmergency(context.Context, *AssignEmergencyRequest) (*AssignEmergencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignEmergency not implemented")
}
func (UnimplementedDronesServiceServer) mustEmbedUnimplementedDronesServiceServer() {}

// UnsafeDronesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DronesServiceServer will
// result in compilation errors.
type UnsafeDronesServiceServer interface {
	mustEmbedUnimplementedDronesServiceServer()
}

func RegisterDronesServiceServer(s grpc.ServiceRegistrar, srv DronesServiceServer) {
	s.RegisterService(&DronesService_ServiceDesc, srv)
}

func _DronesService_AssignEmergency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignEmergencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DronesServiceServer).AssignEmergency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drones.DronesService/AssignEmergency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DronesServiceServer).AssignEmergency(ctx, req.(*AssignEmergencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DronesService_ServiceDesc is the grpc.ServiceDesc for DronesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DronesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drones.DronesService",
	HandlerType: (*DronesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignEmergency",
			Handler:    _DronesService_AssignEmergency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/drones.proto",
}
