// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package emergencia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsignacionServiceClient is the client API for AsignacionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsignacionServiceClient interface {
	SendEmergencies(ctx context.Context, in *EmergencyListRequest, opts ...grpc.CallOption) (*EmergencyListResponse, error)
	NotifyEmergencyExtinguished(ctx context.Context, in *EmergencyExtinguishedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type asignacionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsignacionServiceClient(cc grpc.ClientConnInterface) AsignacionServiceClient {
	return &asignacionServiceClient{cc}
}

func (c *asignacionServiceClient) SendEmergencies(ctx context.Context, in *EmergencyListRequest, opts ...grpc.CallOption) (*EmergencyListResponse, error) {
	out := new(EmergencyListResponse)
	err := c.cc.Invoke(ctx, "/emergencias.AsignacionService/SendEmergencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asignacionServiceClient) NotifyEmergencyExtinguished(ctx context.Context, in *EmergencyExtinguishedNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/emergencias.AsignacionService/NotifyEmergencyExtinguished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsignacionServiceServer is the server API for AsignacionService service.
// All implementations must embed UnimplementedAsignacionServiceServer
// for forward compatibility
type AsignacionServiceServer interface {
	SendEmergencies(context.Context, *EmergencyListRequest) (*EmergencyListResponse, error)
	NotifyEmergencyExtinguished(context.Context, *EmergencyExtinguishedNotification) (*emptypb.Empty, error)
	mustEmbedUnimplementedAsignacionServiceServer()
}

// UnimplementedAsignacionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAsignacionServiceServer struct {
}

func (UnimplementedAsignacionServiceServer) SendEmergencies(context.Context, *EmergencyListRequest) (*EmergencyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmergencies not implemented")
}
func (UnimplementedAsignacionServiceServer) NotifyEmergencyExtinguished(context.Context, *EmergencyExtinguishedNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyEmergencyExtinguished not implemented")
}
func (UnimplementedAsignacionServiceServer) mustEmbedUnimplementedAsignacionServiceServer() {}

// UnsafeAsignacionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsignacionServiceServer will
// result in compilation errors.
type UnsafeAsignacionServiceServer interface {
	mustEmbedUnimplementedAsignacionServiceServer()
}

func RegisterAsignacionServiceServer(s grpc.ServiceRegistrar, srv AsignacionServiceServer) {
	s.RegisterService(&AsignacionService_ServiceDesc, srv)
}

func _AsignacionService_SendEmergencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergencyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsignacionServiceServer).SendEmergencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emergencias.AsignacionService/SendEmergencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsignacionServiceServer).SendEmergencies(ctx, req.(*EmergencyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsignacionService_NotifyEmergencyExtinguished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergencyExtinguishedNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsignacionServiceServer).NotifyEmergencyExtinguished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emergencias.AsignacionService/NotifyEmergencyExtinguished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsignacionServiceServer).NotifyEmergencyExtinguished(ctx, req.(*EmergencyExtinguishedNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// AsignacionService_ServiceDesc is the grpc.ServiceDesc for AsignacionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsignacionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencias.AsignacionService",
	HandlerType: (*AsignacionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmergencies",
			Handler:    _AsignacionService_SendEmergencies_Handler,
		},
		{
			MethodName: "NotifyEmergencyExtinguished",
			Handler:    _AsignacionService_NotifyEmergencyExtinguished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emergencia.proto",
}
