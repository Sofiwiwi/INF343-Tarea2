// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/monitoreo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServicioMonitoreo_StreamActualizaciones_FullMethodName = "/monitoreo.ServicioMonitoreo/StreamActualizaciones"
)

// ServicioMonitoreoClient is the client API for ServicioMonitoreo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioMonitoreoClient interface {
	StreamActualizaciones(ctx context.Context, in *ClienteInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EstadoEmergencia], error)
}

type servicioMonitoreoClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioMonitoreoClient(cc grpc.ClientConnInterface) ServicioMonitoreoClient {
	return &servicioMonitoreoClient{cc}
}

func (c *servicioMonitoreoClient) StreamActualizaciones(ctx context.Context, in *ClienteInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EstadoEmergencia], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServicioMonitoreo_ServiceDesc.Streams[0], ServicioMonitoreo_StreamActualizaciones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClienteInfo, EstadoEmergencia]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServicioMonitoreo_StreamActualizacionesClient = grpc.ServerStreamingClient[EstadoEmergencia]

// ServicioMonitoreoServer is the server API for ServicioMonitoreo service.
// All implementations must embed UnimplementedServicioMonitoreoServer
// for forward compatibility.
type ServicioMonitoreoServer interface {
	StreamActualizaciones(*ClienteInfo, grpc.ServerStreamingServer[EstadoEmergencia]) error
	mustEmbedUnimplementedServicioMonitoreoServer()
}

// UnimplementedServicioMonitoreoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicioMonitoreoServer struct{}

func (UnimplementedServicioMonitoreoServer) StreamActualizaciones(*ClienteInfo, grpc.ServerStreamingServer[EstadoEmergencia]) error {
	return status.Errorf(codes.Unimplemented, "method StreamActualizaciones not implemented")
}
func (UnimplementedServicioMonitoreoServer) mustEmbedUnimplementedServicioMonitoreoServer() {}
func (UnimplementedServicioMonitoreoServer) testEmbeddedByValue()                           {}

// UnsafeServicioMonitoreoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioMonitoreoServer will
// result in compilation errors.
type UnsafeServicioMonitoreoServer interface {
	mustEmbedUnimplementedServicioMonitoreoServer()
}

func RegisterServicioMonitoreoServer(s grpc.ServiceRegistrar, srv ServicioMonitoreoServer) {
	// If the following call pancis, it indicates UnimplementedServicioMonitoreoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicioMonitoreo_ServiceDesc, srv)
}

func _ServicioMonitoreo_StreamActualizaciones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClienteInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicioMonitoreoServer).StreamActualizaciones(m, &grpc.GenericServerStream[ClienteInfo, EstadoEmergencia]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServicioMonitoreo_StreamActualizacionesServer = grpc.ServerStreamingServer[EstadoEmergencia]

// ServicioMonitoreo_ServiceDesc is the grpc.ServiceDesc for ServicioMonitoreo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioMonitoreo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoreo.ServicioMonitoreo",
	HandlerType: (*ServicioMonitoreoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamActualizaciones",
			Handler:       _ServicioMonitoreo_StreamActualizaciones_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monitoreo.proto",
}
